import { NextRequest, NextResponse } from 'next/server'
import { PrismaHealthDataService, HealthDataType } from '../../services/prisma/healthDataService.prisma'

function getUserIdFromRequest(request: NextRequest): string | null {
  try {
    const authHeader = request.headers.get('authorization');
    console.log('üîê Authorization header:', authHeader ? 'Presente' : 'Ausente');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Header de autoriza√ß√£o inv√°lido');
      return null;
    }

    const token = authHeader.substring(7);
    console.log('üé´ Token extra√≠do (primeiros 20 chars):', token.substring(0, 20) + '...');
    
    // Decodificar o token JWT para extrair o userId
    const base64Payload = token.split('.')[1];
    const payload = JSON.parse(atob(base64Payload));
    console.log('üë§ UserId extra√≠do:', payload?.userId);
    
    return payload?.userId || null;
  } catch (error) {
    console.error('‚ùå Erro ao extrair userId do token:', error);
    return null;
  }
}

export async function GET(request: NextRequest) {
  try {
    console.log('üìä [API] Iniciando busca de dados de sa√∫de...');
    
    const userId = getUserIdFromRequest(request);
    if (!userId) {
      console.log('‚ùå [API] Falha na autentica√ß√£o - token inv√°lido');
      return NextResponse.json(
        { message: 'Token de autoriza√ß√£o inv√°lido' },
        { status: 401 }
      );
    }

    console.log('‚úÖ [API] Autentica√ß√£o v√°lida para usu√°rio:', userId);

    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type') as HealthDataType | null;
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');

    console.log('üîç [API] Par√¢metros da busca:', { type, startDate, endDate });

    let healthData;

    try {
      if (startDate && endDate) {
        console.log('üìÖ [API] Buscando por per√≠odo espec√≠fico...');
        // Buscar por per√≠odo espec√≠fico
        healthData = await PrismaHealthDataService.getHealthDataByDateRange(
          userId, 
          startDate, 
          endDate, 
          type || undefined
        );
      } else if (type) {
        console.log('üîç [API] Buscando por tipo espec√≠fico:', type);
        // Buscar por tipo espec√≠fico
        healthData = await PrismaHealthDataService.getHealthDataByType(userId, type);
      } else {
        console.log('üìã [API] Buscando todos os dados...');
        // Buscar todos os dados
        healthData = await PrismaHealthDataService.getAllHealthData(userId);
      }
    } catch (serviceError) {
      console.error('‚ùå [API] Erro no servi√ßo Prisma:', serviceError);
      console.error('‚ùå [API] Stack trace do servi√ßo:', serviceError instanceof Error ? serviceError.stack : 'N/A');
      
      // Retornar erro espec√≠fico do servi√ßo
      return NextResponse.json(
        { 
          message: 'Erro ao acessar dados de sa√∫de',
          error: serviceError instanceof Error ? serviceError.message : 'Erro desconhecido no servi√ßo'
        },
        { status: 500 }
      );
    }

    console.log('‚úÖ [API] Dados de sa√∫de encontrados:', healthData?.length || 0);
    return NextResponse.json(healthData || []);
    
  } catch (error) {
    console.error('‚ùå [API] ERRO GERAL ao buscar dados de sa√∫de:', error);
    console.error('‚ùå [API] Stack trace geral:', error instanceof Error ? error.stack : 'N/A');
    console.error('‚ùå [API] Tipo do erro:', typeof error);
    console.error('‚ùå [API] Mensagem do erro:', error instanceof Error ? error.message : 'N/A');
    
    return NextResponse.json(
      { 
        message: 'Erro interno do servidor',
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        details: 'Erro na API de health-data'
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('‚ûï Criando novo dado de sa√∫de...');
    
    const userId = getUserIdFromRequest(request);
    if (!userId) {
      console.log('‚ùå Falha na autentica√ß√£o - token inv√°lido');
      return NextResponse.json(
        { message: 'Token de autoriza√ß√£o inv√°lido' },
        { status: 401 }
      );
    }

    const body = await request.json();
    console.log('üì¶ Dados recebidos:', body);
    
    const { type, value, secondaryValue, date, notes } = body;
    
    // Validar dados obrigat√≥rios
    if (!type || value === undefined || !date) {
      console.log('‚ùå Dados obrigat√≥rios faltando:', { type, value, date });
      return NextResponse.json(
        { message: 'Tipo, valor e data s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    // Validar tipo
    const validTypes: HealthDataType[] = ['bloodPressure', 'heartRate', 'glucose', 'weight', 'temperature'];
    if (!validTypes.includes(type)) {
      console.log('‚ùå Tipo inv√°lido:', type);
      return NextResponse.json(
        { message: 'Tipo de dado inv√°lido' },
        { status: 400 }
      );
    }

    console.log('üíæ Criando dado de sa√∫de no banco para usu√°rio:', userId);
    
    const newHealthData = await PrismaHealthDataService.addHealthData(
      {
        type: type as HealthDataType,
        value: parseFloat(value),
        secondaryValue: secondaryValue ? parseFloat(secondaryValue) : undefined,
        date,
        notes: notes || undefined
      },
      userId
    );

    console.log('‚úÖ Dado de sa√∫de criado com sucesso:', newHealthData.id);

    return NextResponse.json(
      { 
        success: true, 
        message: 'Dado de sa√∫de registrado com sucesso',
        data: newHealthData
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('‚ùå ERRO DETALHADO ao criar dado de sa√∫de:', error);
    console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'N/A');
    return NextResponse.json(
      { 
        message: 'Erro interno do servidor',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
}

// Rota para gerar dados de exemplo
export async function PUT(request: NextRequest) {
  try {
    console.log('üå± Gerando dados de exemplo...');
    
    const userId = getUserIdFromRequest(request);
    if (!userId) {
      console.log('‚ùå Falha na autentica√ß√£o - token inv√°lido');
      return NextResponse.json(
        { message: 'Token de autoriza√ß√£o inv√°lido' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { action } = body;

    if (action === 'generateSample') {
      await PrismaHealthDataService.generateSampleData(userId);
      
      console.log('‚úÖ Dados de exemplo gerados com sucesso');
      return NextResponse.json({
        success: true,
        message: 'Dados de exemplo gerados com sucesso'
      });
    }

    return NextResponse.json(
      { message: 'A√ß√£o inv√°lida' },
      { status: 400 }
    );
  } catch (error) {
    console.error('‚ùå ERRO DETALHADO ao gerar dados de exemplo:', error);
    return NextResponse.json(
      { 
        message: 'Erro interno do servidor',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
} 